function feature_matrix = SimpleUAVFeatureSetNeighbor( stateMat1, stateMat2 )
    
    x_1         = stateMat1(:,1);
    y_1         = stateMat1(:,2);
    z_1         = stateMat1(:,3);
    theta_1      = stateMat1(:,4);
    
    x_2         = stateMat2(:,1);
    y_2         = stateMat2(:,2);
    z_2         = stateMat2(:,3);
    theta_2      = stateMat2(:,4);
    
    delta_x     = x_2 - x_1;
    delta_y     = y_2 - y_1;
    delta_z     = z_2 - z_1;
    delta_theta = theta_2 - theta_1;
       
    % State Variables
    feature_matrix = [ ...
       
        x_1, ...
        y_1, ...
        z_1, ...
        theta_1, ...
        x_2, ...
        y_2, ...
        z_2, ...
        theta_2];
    
    % Trig functions of heading
    feature_matrix = [feature_matrix, ...
        cos(theta_1), ...
        sin(theta_1), ...
        tan(theta_1), ...
        cos(theta_2), ...
        sin(theta_2), ...
        tan(theta_2)];
    
    % Powers of delta values
    feature_matrix = [feature_matrix, ...
        abs(delta_x), ...
        abs(delta_y), ...
        abs(delta_z), ...
        abs(delta_theta), ...
        delta_x.^2, ...
        delta_y.^2, ...
        delta_z.^2, ...
        delta_theta.^2, ...
        delta_x.^3, ...
        delta_y.^3, ...
        delta_z.^3, ...
        delta_theta.^3];
    
    % Magnitudes
    feature_matrix = [feature_matrix, ...
        sqrt(delta_x.^2+delta_y.^2), ...
        sqrt(delta_x.^2+delta_y.^2+delta_z.^2), ...
        sqrt(delta_x.^2 + delta_y.^2+ delta_z.^2 + delta_theta.^2), ...
        delta_theta.*sqrt(delta_x.^2+delta_y.^2+delta_z.^2)];
    
    % Trig of delta values
    feature_matrix = [feature_matrix, ...
        cos(delta_theta), ...
        sin(delta_theta), ...
        tan(delta_theta), ...
        ...
        delta_x.*cos(delta_theta), ...
        delta_x.*sin(delta_theta), ...
        delta_x.*tan(delta_theta), ...
        delta_y.*sin(delta_theta), ...
        delta_y.*cos(delta_theta), ...
        delta_y.*tan(delta_theta), ...
        delta_z.*sin(delta_theta), ...
        delta_z.*cos(delta_theta), ...
        delta_z.*tan(delta_theta)];
    
    % Products
    feature_matrix = [feature_matrix, ...
        delta_x.*delta_theta, ...
        delta_y.*delta_theta, ...
        delta_z.*delta_theta, ...
        delta_x.*delta_y.*delta_z, ...
        delta_x.*delta_y.*delta_z.*delta_theta];
    
    % Ratios
    feature_matrix = [feature_matrix, ...
        delta_theta./delta_z, ...
        delta_theta./sqrt(delta_x.^2+delta_y.^2), ...
        delta_theta./sqrt(delta_x.^2+delta_y.^2+delta_z.^2), ...
        sin(delta_theta)./sqrt(delta_x.^2+delta_y.^2), ...
        sin(delta_theta)./sqrt(delta_x.^2+delta_y.^2+delta_z.^2), ...
        cos(delta_theta)./sqrt(delta_x.^2+delta_y.^2), ...
        cos(delta_theta)./sqrt(delta_x.^2+delta_y.^2+delta_z.^2), ...
        tan(delta_theta)./sqrt(delta_x.^2+delta_y.^2), ...
        tan(delta_theta)./sqrt(delta_x.^2+delta_y.^2+delta_z.^2), ...
        ...
        sqrt(delta_x.^2+delta_y.^2)./delta_z, ...
        sqrt(delta_x.^2+delta_y.^2)./delta_theta, ...
        sqrt(delta_x.^2+delta_y.^2+delta_z.^2)./delta_theta, ...
        ];
end