
function feature_matrix = dubins_extract_2PBVP_features( stateMat1, stateMat2 )
    x_1         = stateMat1(:,1);
    y_1         = stateMat1(:,2);
    theta_1     = stateMat1(:,3);
    
    x_2         = stateMat2(:,1);
    y_2         = stateMat2(:,2);
    theta_2     = stateMat2(:,3);
    
    w_x         = 1;
    w_y         = 1;
    w_theta     = 1;
    delta_x     = x_2 - x_1;
    delta_y     = y_2 - y_1;
    delta_theta = theta_2 - theta_1;

    feature_matrix = [ ...
%         x_1, ...
%         y_1, ...
%         theta_1, ...
%         abs(x_1), ...
%         abs(y_1), ...
%         abs(theta_1), ...
%         x_1.^2, ...
%         y_1.^2, ...
%         theta_1.^2, ...
%         x_1.*y_1 ...
%         x_1.*theta_1, ...
%         y_1.*theta_1, ...
%         sin(theta_1), ...
%         cos(theta_1), ...
%         tan(theta_1), ...
%         sin(theta_1).^2, ...
%         cos(theta_1).^2, ...
%         tan(theta_1).^2, ...
%         x_1.*sin(theta_1), ...
%         y_1.*sin(theta_1), ...
%         x_1.*cos(theta_1), ...
%         y_1.*cos(theta_1), ...
%         x_1.*tan(theta_1), ...
%         y_1.*tan(theta_1), ...
%         sqrt(x_1.^2 + y_1.^2), ...
%         theta_1.*sqrt(x_1.^2 + y_1.^2), ...
%         sqrt((w_x.*x_1).^2 + (w_y.*y_1).^2 + (w_theta.*theta_1).^2), ...
%         ...
%         ...
%         ...
%         x_2, ...
%         y_2, ...
%         theta_2, ...
%         abs(x_2), ...
%         abs(y_2), ...
%         abs(theta_2), ...
%         x_2.^2, ...
%         y_2.^2, ...
%         theta_2.^2, ...
%         x_2.*y_2 ...
%         x_2.*theta_2, ...
%         y_2.*theta_2, ...
%         sin(theta_2), ...
%         cos(theta_2), ...
%         tan(theta_2), ...
%         sin(theta_2).^2, ...
%         cos(theta_2).^2, ...
%         tan(theta_2).^2, ...
%         x_2.*sin(theta_2), ...
%         y_2.*sin(theta_2), ...
%         x_2.*cos(theta_2), ...
%         y_2.*cos(theta_2), ...
%         x_2.*tan(theta_2), ...
%         y_2.*tan(theta_2), ...
%         sqrt(x_2.^2 + y_2.^2), ...
%         theta_2.*sqrt(x_2.^2 + y_2.^2), ...
%         sqrt((w_x.*x_2).^2 + (w_y.*y_2).^2 + (w_theta.*theta_2).^2), ...
%         ...
%         ...
%         ...
%         delta_x, ...
%         delta_y, ...
%         delta_theta, ...
%         abs(delta_x), ...
%         abs(delta_y), ...
%         abs(delta_theta), ...
%         delta_x.^2, ...
%         delta_y.^2, ...
%         delta_theta.^2, ...
%         delta_x.*delta_y ...
%         delta_x.*delta_theta, ...
%         delta_y.*delta_theta, ...
%         sin(delta_theta), ...
%         cos(delta_theta), ...
%         tan(delta_theta), ...
%         sin(delta_theta).^2, ...
%         cos(delta_theta).^2, ...
%         tan(delta_theta).^2, ...
%         delta_x.*sin(delta_theta), ...
%         delta_y.*sin(delta_theta), ...
%         delta_x.*cos(delta_theta), ...
%         delta_y.*cos(delta_theta), ...
%         delta_x.*tan(delta_theta), ...
%         delta_y.*tan(delta_theta), ...
%         sqrt(delta_x.^2 + delta_y.^2), ...
%         delta_theta.*sqrt(delta_x.^2 + delta_y.^2), ...
%         sqrt((w_x.*delta_x).^2 + (w_y.*delta_y).^2 + (w_theta.*delta_theta).^2), ...
    delta_x, ... 
    delta_y, ... 
    delta_theta, ... 
    abs(delta_x), ...
    abs(delta_y), ...
    abs(delta_theta), ...
    delta_x.^2, ...
    delta_y.^2, ...
    delta_theta.^2, ... 
    sqrt(delta_x.^2+delta_y.^2), ... 
    sqrt(delta_x.^2 + delta_y.^2 + delta_theta.^2), ...
    delta_theta.*sqrt(delta_x.^2+delta_y.^2), ...
    cos(delta_theta), ... 
    sin(delta_theta), ... 
    tan(delta_theta), ...
    cos(delta_theta).^2, ...
    sin(delta_theta).^2, ... 
    tan(delta_theta).^2, ...
    delta_x.*cos(delta_theta), ... 
    delta_x.*sin(delta_theta), ...
    delta_x.*tan(delta_theta), ...
    delta_y.*sin(delta_theta), ... 
    delta_y.*cos(delta_theta), ...
    delta_y.*tan(delta_theta), ...
    delta_x.*delta_theta, ... 
    delta_y.*delta_theta, ...
    delta_x.*delta_y ...
    1./sin(delta_theta), ... 
    1./cos(delta_theta), ... 
    1./tan(delta_theta), ... 
    delta_x./sin(delta_theta), ... 
    delta_x./cos(delta_theta), ...
    delta_x./tan(delta_theta), ...
    delta_y./cos(delta_theta), ... 
    delta_y./sin(delta_theta), ...
    delta_y./tan(delta_theta), ...
];
end
