% Produced by CVXGEN, 2014-01-01 21:07:22 -0500.
% CVXGEN is Copyright (C) 2006-2012 Jacob Mattingley, jem@cvxgen.com.
% The code in this file is Copyright (C) 2006-2012 Jacob Mattingley.
% CVXGEN, or solvers produced by CVXGEN, cannot be used for commercial
% applications without prior written permission from Jacob Mattingley.

% Filename: cvxsolve.m.
% Description: Solution file, via cvx, for use with sample.m.
function [vars, status] = cvxsolve(params, settings)
NAEC = params.NAEC;
gradNAEC = params.gradNAEC;
mu = params.mu;
oldX = params.oldX;
s_tf = params.s_tf;
s_th = params.s_th;
t0 = params.t0;
th0 = params.th0;
thf = params.thf;
turnrate = params.turnrate;
x0 = params.x0;
xf = params.xf;
xlower = params.xlower;
xupper = params.xupper;
y0 = params.y0;
yf = params.yf;
ylower = params.ylower;
yupper = params.yupper;
cvx_begin
  % Caution: automatically generated by cvxgen. May be incorrect.
  variable X(21, 1);

  minimize(X(21) + mu*norm(NAEC + gradNAEC*(X - oldX), 1));
  subject to
     - turnrate - X(16) <= 0;
     - turnrate - X(17) <= 0;
     - turnrate - X(18) <= 0;
     - turnrate - X(19) <= 0;
     - turnrate - X(20) <= 0;
    X(16) - turnrate <= 0;
    X(17) - turnrate <= 0;
    X(18) - turnrate <= 0;
    X(19) - turnrate <= 0;
    X(20) - turnrate <= 0;
    xlower - X(1) <= 0;
    xlower - X(2) <= 0;
    xlower - X(3) <= 0;
    xlower - X(4) <= 0;
    xlower - X(5) <= 0;
    X(1) - xupper <= 0;
    X(2) - xupper <= 0;
    X(3) - xupper <= 0;
    X(4) - xupper <= 0;
    X(5) - xupper <= 0;
    ylower - X(6) <= 0;
    ylower - X(7) <= 0;
    ylower - X(8) <= 0;
    ylower - X(9) <= 0;
    ylower - X(10) <= 0;
    X(6) - yupper <= 0;
    X(7) - yupper <= 0;
    X(8) - yupper <= 0;
    X(9) - yupper <= 0;
    X(10) - yupper <= 0;
    t0 - X(21) <= 0;
    X(1) - x0 == 0;
    X(5) - xf == 0;
    X(6) - y0 == 0;
    X(10) - yf == 0;
    X(11) - th0 == 0;
    X(15) - thf == 0;
    abs(X(11) - oldX(11)) <= s_th;
    abs(X(12) - oldX(12)) <= s_th;
    abs(X(13) - oldX(13)) <= s_th;
    abs(X(14) - oldX(14)) <= s_th;
    abs(X(15) - oldX(15)) <= s_th;
    abs(X(21) - oldX(21)) <= s_tf;
cvx_end
vars.X = X;
status.cvx_status = cvx_status;
% Provide a drop-in replacement for csolve.
status.optval = cvx_optval;
status.converged = strcmp(cvx_status, 'Solved');
